import React, { Component } from "react";
import Amplify, { API, graphqlOperation, Auth } from "aws-amplify";
import { withAuthenticator } from "aws-amplify-react";

// import GraphQl code generated by Amplify
import * as subscriptions from "./graphql/subscriptions";
import * as queries from "./graphql/queries";
import * as mutations from "./graphql/mutations";
import aws_exports from "./aws-exports";

import "./App.css";

// configure Amplify Lib using aws_export generated by CLI
Amplify.configure(aws_exports);

class MessageBox extends React.Component {
  constructor() {
    super();
    this.state = { message: "" };
  }
  onMessageChange = e => {
    this.setState({ message: e.target.value });
  };
  onEnter = e => {
    if (e.keyCode === 13) {
      this.submitMessage();
    }
  };
  submitMessage = () => {
    const { message } = this.state;
    const { submit } = this.props;
    submit(message);
    this.setState({ message: "" });
  };
  render() {
    const { message } = this.state;

    return (
      <div class="messageBox">
        <input type="text" value={message} onChange={this.onMessageChange} onKeyDown={this.onEnter} />
      </div>
    );
  }
}

class App extends Component {
  constructor() {
    super();
    this.state = { messages: [], currentUserNick: "" };
  }

  // Download all avaiable messages
  getMessages = async () => {
    const response = await API.graphql(graphqlOperation(queries.listMessages));
    this.setState({ ...this.state, messages: response.data.listMessages.items.reverse() });
  };

  // Add new message to database
  postNewMessage = async msg => {
    const msgDetails = { body: msg, nick: this.state.currentUserNick };
    await API.graphql(graphqlOperation(mutations.createMessage, { input: msgDetails }));
  };

  componentDidMount() {
    // Use Amplify Auth (Cognito) to get currently logged in user name
    Auth.currentAuthenticatedUser()
      .then(user => this.setState({ ...this.state, currentUserNick: user.username }))
      .catch(err => console.log(err));

    // Launch query
    this.listQuery();

    // Subscribe to stream of messages coming from DynamoDB
    API.graphql(graphqlOperation(subscriptions.onCreateMessage)).subscribe({
      next: messageData => {
        this.setState({ ...this.state, messages: [...this.state.messages, messageData.value.data.onCreateMessage] });
        setTimeout(() => {
          window.scrollTo(0, document.body.scrollHeight);
        }, 100);
      }
    });
  }

  render() {
    const { messages } = this.state;
    return (
      <React.Fragment>
        <ul class="chat">
          {messages.map(message => (
            <React.Fragment>
              <li>
                <span class="author">
                  <strong>{message.nick}</strong> said:
                </span>
                {message.body}
              </li>
            </React.Fragment>
          ))}
        </ul>
        <MessageBox submit={this.postMessage} />
      </React.Fragment>
    );
  }
}

// Wrap whole app with authentication
export default withAuthenticator(App, true);
